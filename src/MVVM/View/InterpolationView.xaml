<UserControl x:Class="eaio.MVVM.View.InterpolationView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:eaio.MVVM.View"
             mc:Ignorable="d"
             d:DesignHeight="475" d:DesignWidth="705"
    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2">
    <UserControl.Resources>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHover.Background" Color="#404040"/>
        <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHover.Border" Color="#404040"/>
        <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelected.Background" Color="#333333"/>
        <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelected.Border" Color="#333333"/>
        <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedHover.Background" Color="#404040"/>
        <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedHover.Border" Color="#404040"/>
        <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedNoFocus.Background" Color="#333333"/>
        <SolidColorBrush x:Key="ComboBoxItem.ItemsviewSelectedNoFocus.Border" Color="#333333"/>
        <SolidColorBrush x:Key="ComboBoxItem.ItemsviewFocus.Border" Color="#404040"/>
        <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHoverFocus.Background" Color="#404040"/>
        <SolidColorBrush x:Key="ComboBoxItem.ItemsviewHoverFocus.Border" Color="#404040"/>
        <Style x:Key="ModelBoxTheme" TargetType="{x:Type ComboBoxItem}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Padding" Value="4,1"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Background" Value="#333333"/>
            <Setter Property="BorderBrush" Value="#333333"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                        <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0.6" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="False"/>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsKeyboardFocused" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewHover.Background}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewHover.Border}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="True"/>
                                    <Condition Property="IsMouseOver" Value="False"/>
                                    <Condition Property="IsKeyboardFocused" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelected.Background}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelected.Border}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="True"/>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelectedHover.Background}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelectedHover.Border}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="True"/>
                                    <Condition Property="IsMouseOver" Value="False"/>
                                    <Condition Property="IsKeyboardFocused" Value="False"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelectedNoFocus.Background}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewSelectedNoFocus.Border}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="False"/>
                                    <Condition Property="IsMouseOver" Value="False"/>
                                    <Condition Property="IsKeyboardFocused" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewFocus.Border}"/>
                            </MultiTrigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="False"/>
                                    <Condition Property="IsMouseOver" Value="True"/>
                                    <Condition Property="IsKeyboardFocused" Value="True"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewHoverFocus.Background}"/>
                                <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ComboBoxItem.ItemsviewHoverFocus.Border}"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="FocusVisual1">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="TextBox.Static.Background" Color="#333333"/>
        <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="AllowDrop" Value="true"/>
            <Setter Property="MinWidth" Value="0"/>
            <Setter Property="MinHeight" Value="0"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Text" Value="Model"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <LinearGradientBrush x:Key="ComboBox.Static.Background" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#333333" Offset="0.0"/>
            <GradientStop Color="#303030" Offset="1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="ComboBox.Static.Border" Color="#FFACACAC"/>
        <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FFACACAC"/>
        <SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="#333333"/>
        <SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="#FFABADB3"/>
        <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="#333333"/>
        <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent"/>
        <LinearGradientBrush x:Key="ComboBox.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#333333" Offset="0.0"/>
            <GradientStop Color="#333333" Offset="1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="#333333"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#FFACACAC"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="#333333"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="#333333"/>
        <LinearGradientBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#FFEBF4FC" Offset="0.0"/>
            <GradientStop Color="#FFDCECFC" Offset="1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="#FF7EB4EA"/>
        <LinearGradientBrush x:Key="ComboBox.Pressed.Background" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#FFDAECFC" Offset="0.0"/>
            <GradientStop Color="#FFC4E0FC" Offset="1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="#333333"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="#FFACACAC"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="#333333"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="#333333"/>
        <LinearGradientBrush x:Key="ComboBox.Pressed.Editable.Button.Background" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#333333" Offset="0.0"/>
            <GradientStop Color="#333333" Offset="1.0"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="#FF569DE5"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="#333333"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="#FFD9D9D9"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="#FFBFBFBF"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="#FFBFBFBF"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="#333333"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent"/>
        <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="ClickMode" Value="Press"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="templateRoot" Background="{StaticResource ComboBox.Static.Background}" BorderBrush="{StaticResource ComboBox.Static.Border}" BorderThickness="0.6" SnapsToDevicePixels="true">
                            <Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="0" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                <Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" Fill="{StaticResource ComboBox.Static.Glyph}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Border}"/>

                            </MultiDataTrigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.MouseOver.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Disabled.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
            <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                </Grid.ColumnDefinitions>
                <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                    <theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                        <Border x:Name="dropDownBorder" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="0" CornerRadius="0">
                            <ScrollViewer x:Name="DropDownScrollViewer">
                                <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                        <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </theme:SystemDropShadowChrome>
                </Popup>
                <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                <Border x:Name="border" Background="{StaticResource TextBox.Static.Background}" Margin="{TemplateBinding BorderThickness}">
                    <TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </Border>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                </Trigger>
                <Trigger Property="IsKeyboardFocusWithin" Value="true">
                    <Setter Property="Foreground" Value="Black"/>
                </Trigger>
                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                    <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                    <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                </Trigger>
                <Trigger Property="HasItems" Value="false">
                    <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="true"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                    <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>

        </ControlTemplate>
        <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
            <Border CornerRadius="6" >
                <Grid x:Name="templateRoot" SnapsToDevicePixels="true">

                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                    </Grid.ColumnDefinitions>

                    <Border CornerRadius="6">
                        <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                            <theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="dropDownBorder" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="0" CornerRadius="0">
                                    <ScrollViewer x:Name="DropDownScrollViewer">
                                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}" Opacity="0"/>
                                            </Canvas>
                                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </theme:SystemDropShadowChrome>
                        </Popup>
                    </Border>
                    <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                    <ContentPresenter x:Name="contentPresenter" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">

                    <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                    <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                </Trigger>
                <Trigger Property="HasItems" Value="false">
                    <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="true"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                    <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="ModelBoxThemeMain" TargetType="{x:Type ComboBox}">
            <Setter Property="Background" Value="#333333"/>
            <Setter Property="Foreground" Value="#FFACACAC"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
            <Style.Triggers>
                <Trigger Property="IsEditable" Value="true">
                    <Setter Property="IsTabStop" Value="false"/>
                    <Setter Property="Padding" Value="2"/>
                    <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="320"/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>

        <Grid.RowDefinitions>
            <RowDefinition Height="75"/>
            <RowDefinition/>
            <RowDefinition Height="150"/>
            <RowDefinition/>
            <RowDefinition Height="0"/>
            <RowDefinition/>
            <RowDefinition Height="0"/>
            <RowDefinition/>
        </Grid.RowDefinitions>

        <StackPanel Grid.Row="0" Grid.ColumnSpan="2" Grid.RowSpan="2">
            <TextBlock Text="Interpolation"
                   Foreground="White"
                   FontSize="28"
                   HorizontalAlignment="Left"
                   Margin="0,0,0,10"/>
            <TextBlock Text="Generate new frames in between existing ones to make a video smoother."
                   Foreground="DarkGray"
                   FontSize="12"
                   HorizontalAlignment="Left"
                   Margin="5,0,0,0"/>
            <TextBlock Text="Notes: No notes  ┐(￣ヘ￣;)┌"
                   Foreground="DarkGray"
                   FontSize="12"
                   HorizontalAlignment="Left"
                   Margin="5,8,0,0"/>

        </StackPanel>

        <StackPanel Grid.Row="1" Margin="0,0,0,75" Grid.RowSpan="2"
                    Grid.ColumnSpan="2" >

            <TextBox Width="400"
                 Height="35"
                 VerticalAlignment="Bottom"
                 HorizontalAlignment="Left"
                 Margin="10,30,0,00"
                 Style="{StaticResource Inputbox}"
                 x:Name="InputFileTextBox"/>

            <TextBox Width="400"
                 Height="35"
                 VerticalAlignment="Bottom"
                 HorizontalAlignment="Left"
                 Margin="10,15,0,00"
                 Style="{StaticResource Outputbox}"
                 x:Name="OutputFileTextBox"/>
        </StackPanel>

        <StackPanel Orientation="Vertical" Grid.Column="1" Grid.Row="1"
                    Grid.RowSpan="2">


            <Button Content="..."
                    Width="35"
                    Height="35"
                    HorizontalAlignment="Left"
                    FontSize="14"
                    VerticalAlignment="Top"
                    Margin="110,30,0,0"
                    Background="#333333"
                    Foreground="DarkGray"
                    BorderThickness="0"
                    x:Name="btnIn" Click="btnIn_Click">
                <Button.Template>
                    <ControlTemplate>
                        <Border CornerRadius="5">
                            <TextBlock Text="..."
                                           VerticalAlignment="Center"
                                           HorizontalAlignment="Center"/>
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Setter Property="Background" Value="#333333"/>
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="#545454" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                        </Border>
                    </ControlTemplate>
                </Button.Template>
            </Button>

            <Button Content="..."
                    Width="35"
                    Height="35"
                    HorizontalAlignment="Left"
                    FontSize="14"
                    VerticalAlignment="Top"
                    Margin="110,15,0,0"
                    Background="#333333"
                    Foreground="DarkGray"
                    BorderThickness="0"
                    x:Name="btnOut" Click="btnOut_Click">
                <Button.Template>
                    <ControlTemplate>
                        <Border CornerRadius="5">
                            <TextBlock Text="..."
                                           VerticalAlignment="Center"
                                           HorizontalAlignment="Center"/>
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Setter Property="Background" Value="#333333"/>
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="#545454" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                        </Border>
                    </ControlTemplate>
                </Button.Template>
            </Button>

        </StackPanel>

        <StackPanel Orientation="Vertical" Grid.Column="1" Grid.Row="1"
                    Grid.RowSpan="2">

            <Button Content="Interpolate"
                    Width="180"
                    Height="85"
                    HorizontalAlignment="Center"
                    FontSize="14"
                    Margin="133,30,0,0"
                    Background="#333333"
                    Foreground="DarkGray"
                    BorderThickness="0"
                    x:Name="btnConvert" Click="btnConvert_Click">
                <Button.Template>
                    <ControlTemplate>
                        <Border CornerRadius="10">
                            <TextBlock Text="Interpolate"
                                           VerticalAlignment="Center"
                                           HorizontalAlignment="Center"
                                       FontSize="25"/>
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Setter Property="Background" Value="#333333"/>
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="#545454" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                        </Border>
                    </ControlTemplate>
                </Button.Template>
            </Button>
        </StackPanel>

        <StackPanel Orientation="Vertical" Grid.Column="1" Grid.Row="1"
                    Grid.RowSpan="5">

            <CheckBox Content="Remove duplicate frames before interpolating (this only removes very obviously duplicate frames)"
                    Width="540"
                    Height="15"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    FontSize="12"
                    Margin="-405,155,0,0"
                    Background="#333333"
                    Foreground="DarkGray"
                    BorderThickness="0"
                    x:Name="ChkProcess">
                <CheckBox.Resources>
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="CornerRadius" Value="2" />
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#545454" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </CheckBox.Resources>
                <CheckBox.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform ScaleX="1.1" ScaleY="1.13"/>
                        <TranslateTransform X="-30" Y="25"/>
                    </TransformGroup>
                </CheckBox.RenderTransform>
            </CheckBox>
        </StackPanel>

        <StackPanel Grid.Row="2"
                    Grid.RowSpan="6"
                    Grid.ColumnSpan="2">

            <TextBox Width="520"
                 Height="35"
                 VerticalAlignment="Center"
                 HorizontalAlignment="Left"
                 Margin="15,285,0,0"
                 Style="{StaticResource CmdOutputUpscale}"
                 x:Name="cmdOutputBox"
                 ScrollViewer.CanContentScroll="True"
                 VerticalScrollBarVisibility="Auto">
                <TextBox.RenderTransform>
                    <TransformGroup>
                        <TranslateTransform X="0" Y="0"/>
                    </TransformGroup>
                </TextBox.RenderTransform>
            </TextBox>

        </StackPanel>

        <StackPanel Margin="0,0,0,0" Grid.Row="7">

            <StackPanel.RenderTransform>
                <TransformGroup>
                    <TranslateTransform X="0" Y="45"/>
                </TransformGroup>
            </StackPanel.RenderTransform>

            <TextBlock Text="AI model"
                       Foreground="DarkGray"
                       FontSize="12"
                       HorizontalAlignment="Left"
                       IsHitTestVisible="False"
                       Grid.RowSpan="2" Margin="0,0,0,3">
                <TextBlock.RenderTransform>
                    <TransformGroup>
                        <TranslateTransform X="10" Y="-257"/>
                    </TransformGroup>
                </TextBlock.RenderTransform>
            </TextBlock>

            <ComboBox Style="{DynamicResource ModelBoxThemeMain}" ItemContainerStyle="{DynamicResource ModelBoxTheme}" Width="247"
                      Height="25"
                      x:Name="ModelBox"
                      VerticalAlignment="Top"
                      HorizontalAlignment="Left"
                      Background="#333333"
                      Foreground="#FFACACAC"
                      Margin="0,0,0,0"
                      Text="AI model"
                      BorderThickness="0"
                      Padding="4,4,0,0"
                      SelectedIndex="0">
                <ComboBox.RenderTransform>
                    <TransformGroup>
                        <TranslateTransform X="10" Y="-257"/>
                    </TransformGroup>
                </ComboBox.RenderTransform>
                <ComboBoxItem Content="Rife v4 - High speed"/>
            </ComboBox>

        </StackPanel>

        <StackPanel Margin="0,0,0,0" Grid.Row="7">

            <StackPanel.RenderTransform>
                <TransformGroup>
                    <TranslateTransform X="260" Y="45"/>
                </TransformGroup>
            </StackPanel.RenderTransform>

            <TextBlock Text="Multiplier"
                       Foreground="DarkGray"
                       FontSize="12"
                       HorizontalAlignment="Left"
                       IsHitTestVisible="False"
                       Grid.RowSpan="2" Margin="0,0,0,3">
                <TextBlock.RenderTransform>
                    <TransformGroup>
                        <TranslateTransform X="10" Y="-257"/>
                    </TransformGroup>
                </TextBlock.RenderTransform>
            </TextBlock>

            <ComboBox Style="{DynamicResource ModelBoxThemeMain}" ItemContainerStyle="{DynamicResource ModelBoxTheme}" 
                      Width="100"
                      Height="25"
                      x:Name="MultiplierBox"
                      VerticalAlignment="Top"
                      HorizontalAlignment="Left"
                      Background="#333333"
                      Foreground="#FFACACAC"
                      Margin="0,0,0,0"
                      Text="Interp Multiplier"
                      BorderThickness="0"
                      Padding="4,4,0,0"
                      SelectedIndex="0"
                      SelectionChanged="MultiplierBox_SelectionChanged">
                <ComboBox.RenderTransform>
                    <TransformGroup>
                        <TranslateTransform X="10" Y="-257"/>
                    </TransformGroup>
                </ComboBox.RenderTransform>
                <ComboBoxItem Content="2x" x:Name="twoex"/>
                <ComboBoxItem Content="4x"/>
                <ComboBoxItem Content="8x"/>
            </ComboBox>

        </StackPanel>

        <StackPanel Margin="0,0,0,0" Grid.Row="7" Orientation="Horizontal">

            <StackPanel.RenderTransform>
                <TransformGroup>
                    <TranslateTransform X="0" Y="135"/>
                </TransformGroup>
            </StackPanel.RenderTransform>

            <TextBlock Text="Elapsed time:"
                       Foreground="DarkGray"
                       FontSize="12"
                       HorizontalAlignment="Left"
                       IsHitTestVisible="False"
                       Grid.RowSpan="2" Margin="0,0,0,40"
                       x:Name="ElapsedTimeHadle">
                <TextBlock.RenderTransform>
                    <TransformGroup>
                        <TranslateTransform X="10" Y="-257"/>
                    </TransformGroup>
                </TextBlock.RenderTransform>
            </TextBlock>

            <TextBlock Text="00:00.000"
                       Foreground="DarkGray"
                       FontSize="12"
                       HorizontalAlignment="Left"
                       IsHitTestVisible="False"
                       Grid.RowSpan="2" Margin="5,0,0,40"
                       x:Name="ElapsedTimeText">
                <TextBlock.RenderTransform>
                    <TransformGroup>
                        <TranslateTransform X="10" Y="-257"/>
                    </TransformGroup>
                </TextBlock.RenderTransform>
            </TextBlock>

        </StackPanel>

        <StackPanel Margin="0,0,0,0" Grid.Row="7" Orientation="Horizontal">

            <StackPanel.RenderTransform>
                <TransformGroup>
                    <TranslateTransform X="0" Y="155"/>
                </TransformGroup>
            </StackPanel.RenderTransform>

            <TextBlock Text="Progress (broken on some devices):"
                       Foreground="DarkGray"
                       FontSize="12"
                       HorizontalAlignment="Left"
                       IsHitTestVisible="False"
                       Grid.RowSpan="2" Margin="0,0,0,40"
                       x:Name="PercenatgeHandle">
                <TextBlock.RenderTransform>
                    <TransformGroup>
                        <TranslateTransform X="10" Y="-257"/>
                    </TransformGroup>
                </TextBlock.RenderTransform>
            </TextBlock>

            <TextBlock Text="0%"
                       Foreground="DarkGray"
                       FontSize="12"
                       HorizontalAlignment="Left"
                       IsHitTestVisible="False"
                       Grid.RowSpan="2" Margin="5,0,0,40"
                       x:Name="Percentage">
                <TextBlock.RenderTransform>
                    <TransformGroup>
                        <TranslateTransform X="10" Y="-257"/>
                    </TransformGroup>
                </TextBlock.RenderTransform>
            </TextBlock>

        </StackPanel>

        <StackPanel Margin="0,0,0,0" Grid.Row="7" Orientation="Horizontal">

            <StackPanel.RenderTransform>
                <TransformGroup>
                    <TranslateTransform X="0" Y="175"/>
                </TransformGroup>
            </StackPanel.RenderTransform>

            <TextBlock Text="Output fps: "
                       Foreground="DarkGray"
                       FontSize="12"
                       HorizontalAlignment="Left"
                       IsHitTestVisible="False"
                       Grid.RowSpan="2" Margin="0,0,0,40"
                       x:Name="FpsHandle">
                <TextBlock.RenderTransform>
                    <TransformGroup>
                        <TranslateTransform X="10" Y="-257"/>
                    </TransformGroup>
                </TextBlock.RenderTransform>
            </TextBlock>

            <TextBlock Text="— —"
                       Foreground="DarkGray"
                       FontSize="12"
                       HorizontalAlignment="Left"
                       IsHitTestVisible="False"
                       Grid.RowSpan="2" Margin="5,0,0,40"
                       x:Name="OutFps">
                <TextBlock.RenderTransform>
                    <TransformGroup>
                        <TranslateTransform X="10" Y="-257"/>
                    </TransformGroup>
                </TextBlock.RenderTransform>
            </TextBlock>

        </StackPanel>

        <StackPanel Margin="0,0,0,0" Grid.Row="7" Orientation="Horizontal">

            <StackPanel.RenderTransform>
                <TransformGroup>
                    <TranslateTransform X="0" Y="195"/>
                </TransformGroup>
            </StackPanel.RenderTransform>

            <TextBlock Text="State:"
                       Foreground="DarkGray"
                       FontSize="12"
                       HorizontalAlignment="Left"
                       IsHitTestVisible="False"
                       Grid.RowSpan="2" Margin="0,0,0,40"
                       x:Name="StateHandle">
                <TextBlock.RenderTransform>
                    <TransformGroup>
                        <TranslateTransform X="10" Y="-257"/>
                    </TransformGroup>
                </TextBlock.RenderTransform>
            </TextBlock>

            <TextBlock Text="Idling"
                       Foreground="DarkGray"
                       FontSize="12"
                       HorizontalAlignment="Left"
                       IsHitTestVisible="False"
                       Grid.RowSpan="2" Margin="5,0,0,40"
                       x:Name="State">
                <TextBlock.RenderTransform>
                    <TransformGroup>
                        <TranslateTransform X="10" Y="-257"/>
                    </TransformGroup>
                </TextBlock.RenderTransform>
            </TextBlock>

        </StackPanel>

    </Grid>
</UserControl>
